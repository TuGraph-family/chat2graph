app:
  name: "Chat2Graph"
  desc: "An Agentic System on Graph Database."
  version: "0.0.1"

plugin:
  workflow_platform: "DBGPT"

reasoner:
  type: "DUAL"

tools:
  - &document_reader_tool
    name: "DocumentReader"
    module_path: "app.plugin.neo4j.resource.graph_modeling"

  - &vertex_label_adder_tool
    name: "VertexLabelAdder"
    module_path: "app.plugin.neo4j.resource.graph_modeling"

  - &edge_label_adder_tool
    name: "EdgeLabelAdder"
    module_path: "app.plugin.neo4j.resource.graph_modeling"

  - &graph_reachability_getter_tool
    name: "GraphReachabilityGetter"
    module_path: "app.plugin.neo4j.resource.graph_modeling"

  - &schema_getter_tool
    name: "SchemaGetter"
    module_path: "app.plugin.neo4j.resource.data_importation"

  - &data_status_check_tool
    name: "DataStatusCheck"
    module_path: "app.plugin.neo4j.resource.data_importation"

  - &data_import_tool
    name: "DataImport"
    module_path: "app.plugin.neo4j.resource.data_importation"

  - &cypher_executor_tool
    name: "CypherExecutor"
    module_path: "app.plugin.neo4j.resource.graph_query"

  - &algorithms_getter_tool
    name: "AlgorithmsGetter"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &page_rank_executor_tool
    name: "PageRankExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &betweenness_centrality_executor_tool
    name: "BetweennessCentralityExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &louvain_executor_tool
    name: "LouvainExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &label_propagation_executor_tool
    name: "LabelPropagationExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &shortest_path_executor_tool
    name: "ShortestPathExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &node_similarity_executor_tool
    name: "NodeSimilarityExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &common_neighbors_executor_tool
    name: "CommonNeighborsExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &kmeans_executor_tool
    name: "KMeansExecutor"
    module_path: "app.plugin.neo4j.resource.graph_analysis"

  - &knowledge_base_retriever_tool
    name: "KnowledgeBaseRetriever"
    module_path: "app.plugin.neo4j.resource.question_answering"

  - &internet_retriever_tool
    name: "InternetRetriever"
    module_path: "app.plugin.neo4j.resource.question_answering"

  - &system_status_checker_tool
    name: "SystemStatusChecker"
    module_path: "app.plugin.neo4j.resource.system_checking"

actions:
  # graph modeling actions
  - &content_understanding_action
    name: "content_understanding"
    desc: "通过阅读和批注理解文档的主要内容和结构（需要调用一个/些工具）"
    tools:
      - *document_reader_tool

  - &deep_recognition_action
    name: "deep_recognition"
    desc:
      识别被分析的文本中的关键概念和术语（通过文本的形式），对概念进行分类，发现概念间的关系模式和交互方式，建立层级关系
      1. 语义层分析
      - 显式信息（比如，关键词、主题、术语定义）
      - 隐式信息（比如，深层语义、上下文关联、领域映射）
      2. 关系层分析
      - 实体关系（比如，直接关系、间接关系、层次关系）。时序关系（比如，状态变迁、演化规律、因果链条）
      3. 知识推理
      - 模式推理、知识补全

      关于图 schema 建模的思考维度：
      1. 实体类型定义
      - 从以下维度思考和定义实体类型：
      * 时间维度：事件、时期、朝代等时序性实体
      * 空间维度：地点、区域、地理特征等空间性实体
      * 社会维度：人物、组织、势力等社会性实体（可选）
      * 文化维度：思想、文化、典故等抽象实体（可选）
      * 物理维度：物品、资源、建筑等具象实体（可选）
      - 建立实体类型的层次体系：
      * 定义上下位关系（如：人物-君主-诸侯）
      * 确定平行关系（如：军事人物、政治人物、谋士）
      * 设计多重继承关系（如：既是军事人物又是谋士）
      - 为每个实体类型设计丰富的属性集：
      * 基础属性：标识符、名称、描述等
      * 类型特有属性：根据实体类型特点定义
      * 关联属性：引用其他实体的属性
      - 考虑实体的时态性：
      * 属性的时效性（如：官职随时间变化）（可选）
      * 状态的可变性（如：阵营的转变）（可选）
      - 为每个实体类型定义完整的属性集，包括必需属性和可选属性
      - 确保实体类型之间存在潜在的关联路径，但保持概念边界的独立性

      2. 关系类型设计
      - 定义实体间的关系类型，包括直接关系、派生关系和潜在关系
      - 明确关系的方向性（有向）、设计关系的属性集
      - 通过关系组合，验证关键实体间的可达性
      - （可选）考虑添加反向关系以增强图的表达能力

  - &entity_type_definition_action
    name: "entity_type_definition"
    desc: "定义和分类文档中识别出的核心实体类型"

  - &relation_type_definition_action
    name: "relation_type_definition"
    desc: "设计实体间的关系类型和属性"

  - &schema_design_and_import_action
    name: "schema_design_and_import"
    desc: "将概念模型转化为图数据库 labels，并使用相关工具在图数据库中创建图 schema (如果需要的话，可以多次调用工具并在数据库中创建 labels，以确保完成给定的任务)（需要调用一个/些工具）"
    tools:
      - *schema_getter_tool
      - *vertex_label_adder_tool
      - *edge_label_adder_tool

  - &graph_validation_action
    name: "graph_validation"
    desc: "反思和检查图的可达性(Reachability)（需要调用一个/些工具）"
    tools:
      - *graph_reachability_getter_tool

  # data importation actions
  - &schema_understanding_action
    name: "schema_understanding"
    desc: "调用相关工具获取图模型，并对图模型进行分析和理解（需要调用一个/些工具）"
    tools:
      - *schema_getter_tool

  - &data_status_check_action
    name: "data_status_check"
    desc: "检查图数据库中当前数据的状态，了解现有数据情况，确保后续数据导入的一致性（需要调用一个/些工具）"
    tools:
      - *data_status_check_tool

  - &content_understanding_action_2
    name: "content_understanding_2"
    desc: "调用相关工具获取原始文本内容，并结合图模型（schema）进行分析和理解（需要调用一个/些工具）"
    tools:
      - *document_reader_tool

  - &triplet_data_generation_action
    name: "triplet_data_generation"
    desc: "根据图模型理解和文本内容理解，进行三元组数据抽取并存入图数据库(如果需要的话，可以多次抽取并导入数据库，以确保完成给定的任务)（需要调用一个/些工具）"
    tools:
      - *data_import_tool

  - &output_result_action
    name: "output_result"
    desc: "输出数据导入结果的汇总信息"

  # graph query actions
  - &vertex_type_and_condition_validation_action
    name: "vertex_type_and_condition_validation"
    desc: "读取图数据现有的 schema，以检查查询的意图和要求是否和对应的模型匹配、检查条件是否和对应的模型匹配，如果不匹配，需要修改相应查询句柄（需要调用一个/些工具）"
    tools:
      - *schema_getter_tool

  - &supplement_action
    name: "supplement"
    desc: "如查询条件/节点类型缺少或不匹配，则需要经过自己的思考和推理，补充缺少的查询内容（如果多次尝试失败，那么需要及时止损）"

  - &query_execution_action
    name: "query_execution"
    desc: "根据图查询语法、图现有 schema 和查询要求，调用图数据库工具函数，在对应图上执行查询语句得到结果（需要调用一个/些工具）"
    tools:
      - *schema_getter_tool
      - *cypher_executor_tool

  # graph analysis actions
  - &content_understanding_action_3
    name: "content_understanding_3"
    desc: "理解和分析用户的需求"

  - &algorithms_intention_identification_action
    name: "algorithms_intention_identification"
    desc: "确认需要执行的算法（可能是多个），确定算法的名称等信息"
    tools:
      - *algorithms_getter_tool

  - &algorithms_execution_action
    name: "algorithms_execution"
    desc: |
      调用相关的算法执行工具，执行算法（需要调用一个/些工具）。
      当遇见棘手的算法工具使用问题时，可以查询当下图数据库的 schema 或者执行 Cypher 查询语句，从而帮助你更好地理解和配置算法工具的输入参数。
      另一方面，由于图数据库算法对于输入的参数有严格要求，而在 LLMs 中，算法的输入参数通常模糊不清，尤其是数据节点和边的参数。比如，可能想要输入"Romeo"，但是图数据库中只有"romeo"。你可以通过查询图数据库的 schema 或者执行 Cypher 查询语句，来帮助你更好地理解和配置算法工具的输入参数。
      注意：你不能够询问用户更多的信息。
    tools:
      - *page_rank_executor_tool
      - *betweenness_centrality_executor_tool
      - *louvain_executor_tool
      - *label_propagation_executor_tool
      - *shortest_path_executor_tool
      - *node_similarity_executor_tool
      - *common_neighbors_executor_tool
      - *kmeans_executor_tool
      - *cypher_executor_tool
      - *schema_getter_tool

  # question answering actions
  - &knowledge_base_retrieving_action
    name: "knowledge_base_retrieving"
    desc: "调用knowledge_base_search工具，从外接知识库中检索得到问题相关的文档，若多次检索得不到相关结果，放弃调用该工具（需要调用一个/些工具）"
    tools:
      - *knowledge_base_retriever_tool

  - &reference_listing_action
    name: "reference_listing"
    desc: "以markdown格式返回推理过程中所涉及的原文及网页链接，方便展示"

  # job decomposition actions
  - &query_system_status_action
    name: "query_system_status"
    desc: "调用相关工具查询系统状态获取系统状态信息。大模型需要了解系统的状态，以便更好地进行推理和决策（需要调用一个/些工具）"
    tools:
      - *system_status_checker_tool
      - *document_reader_tool

  - &job_decomposition_action
    name: "job_decomposition"
    desc: "按照相关的要求将任务，手动分解为多个子任务(job)，并将每个子任务分配给对应的专家"

toolkit:
  - [*content_understanding_action, *deep_recognition_action]
  - [
      *entity_type_definition_action,
      *relation_type_definition_action,
      *schema_design_and_import_action,
      *graph_validation_action,
    ]
  - [
      *schema_understanding_action,
      *data_status_check_action,
      *content_understanding_action_2,
      *triplet_data_generation_action,
      *output_result_action,
    ]
  - [
      *vertex_type_and_condition_validation_action,
      *supplement_action,
      *query_execution_action,
    ]
  - [
      *content_understanding_action_3,
      *algorithms_intention_identification_action,
      *algorithms_execution_action,
    ]
  - [*knowledge_base_retrieving_action]
  - [*reference_listing_action]
  - [*query_system_status_action, *job_decomposition_action]

operators:
  # graph modeling operators
  - &analysis_operator
    instruction: |
      你是一位专业的文档分析专家，专注于从文档中提取关键信息，为知识图谱的构建奠定坚实基础。
      你需要理解文档内容。请注意，你分析的文档可能只是全集的一个子集，需要通过局部推断全局。
      请注意，你的任务不是需要操作图数据库。你的任务是分析文档，为后续的 knowledge graph modeling 提供重要信息。
      请确保你的分析全面、细致，并为每一个结论提供充分的理由。
    output_schema: |
      domain：文档所属领域的描述，帮助后续建模和数据抽取
      data_full_view：对文档数据全貌的详细推测，包括数据结构、规模、实体关系等，并提供思考链路和理由
      concepts：识别出的关键概念列表，每个概念包括名称、描述和重要性
        比如：
          concepts:
            - concept: "Person"
              description: "指文档中提及的历史人物"
              importance: ……
            - concept: "Event"
              description: "指文档中描述的历史事件"
              importance: ……
      properties：识别出的概念属性列表，每个属性包括所属概念、名称、描述和数据类型
        比如：
          properties:
            - concept: "Person"
              property: "birth_date"
              description: "出生日期"
              data_type: "date"
            - concept: "Event"
              property: "location"
              description: "事件发生地点"
              data_type: "string"
      potential_relations：识别出的潜在关系列表，每个关系包括类型、涉及的实体和描述
        比如：
          potential_relations:
            - relation: "participated_in"
              entities_involved: ["Person", "Event"]
              description: "指某人参与了某事件"
              strength: "strong"
            - relation: "located_in"
              entities_involved: ["Event", "Location"]
              description: "指事件发生在某地点"
              strength: "medium"
      document_insights：其他重要信息或发现，它们独属于本文档的特殊内容，请用分号隔开。比如，文档中提及的某些特定事件或概念的独特解释。
      document_snippets：文档中的关键片段，用于支撑你的分析结论，提供上下文信息。可以是原文摘录或重要段落。
    actions:
      - *content_understanding_action
      - *deep_recognition_action

  - &concept_modeling_operator
    instruction: |
      你是一位知识图谱建模专家，擅长将概念和关系转化为图数据库模式。你需要设计合适的实体

      你应该基于文档分析的结果，完成概念建模的任务，同时确保图建模的正确性和可达性。


      3. Schema生成
      - 使用 graph schema creator 的函数，可以使用该函数生成 schema，为 vertex 和 edge 创建特殊的 schema。你不能直接写 cypher 语句，而是使用工具函数来帮助你操作数据库。
      - 请注意：Schema 不是在 DB 中插入节点、关系等具体的数据，而是定义图数据库的模式（schema/label）。预期应该是定义是实体的类型、关系的类型、约束等这些东西。
      - 任务的背景是知识图谱，所以，不要具体的某个实体，而是相对通用的实体。比如，可以从时间、抽象概念、物理实体和社会实体等多个主要维度来考虑。
      - 需要多次读取 TuGraph 现有的 Schema，目的是确保根据 DDL 创建的 schema 符合预期。

      4. 验证图的可达性
      - 可达性是图数据库的核心特性之一，确保图中的实体和关系之间存在有效的连接路径，以支持复杂的查询需求。这在图建模中很重要，因为如果图不可达，将无法在构建一个完整的知识图谱。
      - 通过查询图数据库，获取图的结构信息，验证实体和关系的可达性。
    output_schema: |
      图 schema 可达性: 可达性分析结果，描述图中实体和关系之间的连接路径
      状态: schema 状态，是否通过验证
      实体标签: 成功创建的实体标签列表，例如：'Person', 'Organization'
      关系标签: 成功创建的关系标签列表，例如：'WorksAt', 'LocatedIn'
    tools:
    actions:
      - *content_understanding_action
      - *deep_recognition_action
      - *entity_type_definition_action
      - *relation_type_definition_action
      - *schema_design_and_import_action
      - *graph_validation_action

  # data importation operators
  - &data_importation_operator
    instruction: |
      你是一位资深的图数据抽取专家。
      你的使命是，基于已分析的文档内容和图模型，精准地抽取关键信息，为构建知识图谱提供坚实的数据基础。
      在这一阶段，你不是在创造知识，而是在发掘隐藏在文档中的事实。
      你的目标是从文本中提取实体、关系和属性，请确保数据的准确、丰富、完整，因为后续的知识图谱构建将直接依赖于你抽取的数据质量。
      抽取数据完成后，你需要调用指定的工具，完成数据的导入。
      最后需要输出导入结果的总结。

      必须执行以下全部步骤：
      1. 调用相关工具获取图模型，并对图模型进行分析和理解
      2. 调用相关工具获取文本内容，并结合图模型进行分析和理解
      3. 根据对图模型理解和文本内容理解的结果，进行三元组数据的抽取（多次抽取），并存入图数据库中
      4. 输出数据导入结果
    output_schema: |
      输出结果：成功导入实体的数量、成功导入关系的数量；导入数据明细；（如果错误，原因是什么）
    actions:
      - *schema_understanding_action
      - *data_status_check_action
      - *content_understanding_action_2
      - *triplet_data_generation_action
      - *output_result_action

  # graph query operators
  - &query_design_operator
    instruction: |
      你是一位专业的图数据库查询专家。
      你需要识别图查询的诉求，并校验查询的内容和对应的图模型是否匹配。如通过主键查询节点需要有指定的节点类型和明确的主键，如通过节点的普通属性查询需要指定节点类型、正确的属性筛选条件，并在模型上有对应的属性索引
      然后基于此，执行相关查询语句或者工具，从而获得数据库中的数据。
      如节点查询最常用的语法为 MATCH, WHERE, RETURN 等。你不具备写 Cypher 的能力，你只能调用工具来帮助你达到相关的目的。
    output_schema: |
      查询的内容：[用自然语言描述查询的内容]
      查询的结果：[如果查询成功，返回查询结果；如果查询失败，返回错误信息；r如果没有查询结果，用自然语言说明原因]
    actions:
      - *vertex_type_and_condition_validation_action
      - *supplement_action
      - *query_execution_action

  # graph analysis operators
  - &algorithms_execute_operator
    instruction: |
      你是一个专业的图算法执行专家。你的工作是根据算法需求执行相应的图算法，并返回结果。
      注意，你不能够询问用户更多的信息。

      基于验证过的算法、算法参数，按要求完成算法执行任务：

      1.运行算法
      - 验证算法的可执行性（包括图数据库中是否支持该算法）
      - 按照算法的输入
    output_schema: |
      调用算法：调用的算法和参数（如果有多个算法）
      状态：算法执行的状态
      算法结果：算法执行的结果。如果失败，返回失败原因
      ...（格式自由）
    actions:
      - *content_understanding_action_3
      - *algorithms_intention_identification_action
      - *algorithms_execution_action

  # question answering operators
  - &retrieving_operator
    instruction: |
      你是一位专业的文档检索专家。你的工作是，从知识库中检索与问题相关的文档，
      如果未能从知识库中检索到相关文档，直接结束任务返回空内容即可。
      仔细阅读检索得到的文档材料，分别总结每一份文档，为后续回答用户问题作准备。
      你阅读的文档未必与用户的问题直接相关，但是你仍然需要进行清晰全面的总结。
      你的任务是检索并总结文档，为后续推理得到最终的答案做铺垫。

      请认真理解给定的问题，同时，按要求完成任务：

      1.文档检索
      - 通过知识库检索得到与问题相关的文档
      2. 文档整理
      - 将知识库中检索得到各个文档分别总结为一段内容
    output_schema: |
      original_question: 输入的原始问题
      knowledge_base_result: 知识库中检索得到的相关内容总结
      knowledge_base_quotes: 知识库中检索得到的相关内容原文[1] ... [2] ...
    actions:
      - *knowledge_base_retrieving_action

  - &summarizing_operator
    instruction: |
      你是一位文档总结专家,擅长总结归纳不同来源的文档。你需要根据用户的问题，总结归纳出用户需要的答案。

      基于检索得到的文档内容，根据具体的情况，完成以下文档总结任务:

      1. 分别总结不同来源的文档内容
      - 总结从知识库中检索得到问题相关内容

      2. 归纳不同来源的总结结果
      - 分析不同来源的文档总结的相同点与不同点
      - 归纳得出一份更完整的总结内容

      3. 答案生成
      - 分析问题的实际意图
      - 对用户提出的问题生成一个回答
      - 如果来自文档的内容对回答问题有所帮助，则参考来自文档的内容总结，优化回答内容
      - 如果回答中涉及了来自知识库中的内容，提供回答中涉及的原文片段
      - 如果没有检索到能帮助回答的相关文档，请你根据大模型自身的知识和经验，回答问题（避免你的 hallucination，不需要提供 reference）
    output_schema: |
      // 针对用户问题的最终回答，如果没有搜索到相关的原文，则可以在说明没有搜索到相关原文后，自己直接回答，避免出现拒绝回答的情况。
      // 回答内容，其中回答部分不要有显示的指示性的语言，比如，“这是回答，等”...
      // 引用部分...
      知识库引用: 如果有参考从知识库检索到的内容，分段列出回答过程中从知识库中检索得到的文字片段（从 1 开始），格式比如：
      [1] 文字片段 1（请从原文中提炼出不超过20字的文本，可以使用省略号帮助表达。关于内容，请使用不出现 # 这样的层级标签的 markdown 格式，避免出现乱码，阅读友好）
      [2] 文字片段 2（请从原文中提炼出不超过20字的文本，可以使用省略号帮助表达。关于内容，请使用不出现 # 这样的层级标签的 markdown 格式，避免出现乱码，阅读友好）
      ... // 更多，如果需要的话；如果没有检索到相关的内容，则可以不提供，并且也不要出现“知识库引用”字样
      网页引用: 如果有参考从互联网检索到的网页内容，分段列出回答生成过程中参考的网页的名称和链接（从 1 开始），格式比如：
      [1] [网页名称 1](网页链接 1)
      [2] [网页名称 2](网页链接 2)
      ... // 更多，如果需要的话；如果没有检索到相关的网页，则可以不提供，并且也不要出现“网页引用”字样

      一个简单的回答的例子，比如（不要出现 original_question 这样的类似的字眼，如果引用不为空，则应该在回答中嵌入 [ N ] 这样的符号来表示引用）：

      图数据库是一种使用图结构进行语义查询的数据库，它使用节点、边和属性来表示和存储数据。与关系数据库相比，图数据库更擅长处理复杂的关系网络 [1] 。常见的图数据库包括 Neo4j、ArangoDB 和 JanusGraph [2] 。

      知识库引用:
      [1] 图数据库的核心优势在于其处理复杂关系的能力，尤其是在社交网络、推荐系统和知识图谱等应用场景中 ...（可以使用省略号帮助表达）
      [2] Neo4j 是目前最流行的图数据库之一，提供了强大的查询语言和图算法支持。JanusGraph 则是一个开源 ...（可以使用省略号帮助表达）

      网页引用:
      [1] [图数据库简介 - Neo4j 官网](https://neo4j.com/developer/graph-database/)
      [2] [什么是图数据库？- AWS](https://aws.amazon.com/nosql/graph/)

    actions:
      - *reference_listing_action

experts:
  - profile:
      name: "Design Expert"
      desc: |
        他是一位知识图谱建模(schema)专家。
        他的任务是根据具体的数据需求设计图的 Schema，明确定义顶点（Vertices）和边（Edges）的类型、属性及其关系。同时在图数据中创建/更新 Schema。
        他只能为某个特定的图数据库实例创建或修改数据结构（Schema）。
        他的输出是一个用于后续数据导入的清晰 Schema 定义。**他本身不处理具体数据（CURD），也绝不回答关于图数据库产品或技术本身的一般性介绍或询问。**
    reasoner:
      actor_name: "Design Expert"
      thinker_name: "Design Expert"
    workflow:
      - [*analysis_operator, *concept_modeling_operator]

  - profile:
      name: "Extraction Expert"
      desc: |
        他是一位原始数据抽取与数据导入图数据专家。
        他的前置要求是图 schema 在图数据库（不论是不是弱 schema 的数据库）中必须存在且已经定义了节点标签和边标签（否则专家将无法完成相关任务），且有明确的原始数据源（如文档、文件、数据库表、待处理文本，由用户上传）需要处理和导入到一个特定的图数据库实例。
        他的任务是：1. 根据已定义的 Schema 从原始数据中抽取结构化信息。 2. 将抽取的信息导入到目标图数据库中。
        他会输出数据导入过程的总结或状态报告。**他不负责设计 Schema、执行查询分析，也绝不提供关于图数据库技术或产品的一般性介绍。**
    reasoner:
      actor_name: "Extraction Expert"
      thinker_name: "Extraction Expert"
    workflow:
      - [*data_importation_operator]

  - profile:
      name: "Query Expert"
      desc: |
        他是一位图数据查询专家。
        假设在一个已存在数据、且结构已知的特定图数据库实例上，需要执行精确查询以获取具体数据点或关系。
        他的任务是：1. 理解用户的具体查询意图。 2. 编写精确的图查询语句。 3. 在目标图数据库上执行查询。
        他会返回查询到的具体数据结果。**他不执行复杂的图算法分析，不负责建模或导入数据，也绝不回答关于图数据库概念、产品或技术本身的一般性问题。**
    reasoner:
      actor_name: "Query Expert"
      thinker_name: "Query Expert"
    workflow:
      - [*query_design_operator]

  - profile:
      name: "Analysis Expert"
      desc: |
        他是一位图数据分析与算法应用专家。
        假设在一个已存在结构化数据、且需要进行超越简单查询的复杂网络分析（如社区发现、中心性计算等）的特定图数据库实例上。
        他的任务是根据分析目标，选择、配置并在目标图数据库上执行相应的图算法。
        他会返回算法执行的结果及其解释。**他不负责数据建模、导入、简单的节点/关系查找，也绝不提供关于图数据库技术或产品的一般性介绍。**
    reasoner:
      actor_name: "Analysis Expert"
      thinker_name: "Analysis Expert"
    workflow:
      - [*algorithms_execute_operator]

  - profile:
      name: "Q&A Expert"
      desc: |
        他是一位通用问答与信息检索专家。
        **当任务是请求关于某个概念、技术、产品（例如，“介绍一下 Graph”）的一般性信息、定义、解释、比较或总结时，他是首选且通常是唯一的专家，** 尤其是当问题不涉及操作或查询一个具体的、已存在数据的图数据库实例时。
        他的任务是：1. 理解问题。 2. 从通用知识库、互联网或提供的文档中检索最相关的信息。 3. 综合信息并生成一个全面、清晰的回答。
        他会输出对问题的直接回答。**他完全不与任何项目特定的图数据库交互，不执行图查询或图算法，也不进行数据建模或导入。他专注于提供信息和解释，而非操作数据。** (类似于 RAG)
    reasoner:
      actor_name: "Q&A Expert"
      thinker_name: "Q&A Expert"
    workflow:
      - [*retrieving_operator, *summarizing_operator]

leader:
  actions:
    - *query_system_status_action
    - *job_decomposition_action

knowledgebase: {}
memory: {}
env: {}

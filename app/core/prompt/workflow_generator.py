eval_prompt_template="""
You are an expert evaluator tasked with assessing the quality of answers generated by llm. Each question is executed using a workflow, using available tools.
You should output a number between 0 and 5.

For each case, you will be given the following:

<question>
A natural language question that is intended to be answered using the graph database.
</question>

<expected_answer>
The ground-truth answer expected from the workflow execution.
</expected_answer>

<workflow_output>
The answer generated by executing a Python workflow that queries the graph and processes the results.

Your task is to:

1. Judge how accurately the workflow_output answers the question.
2. Compare the workflow_output to the expected_answer in terms of:
    - Correctness (factually correct based on question intent)
    - Completeness (does it cover all parts of the question?)
    - Faithfulness (does it hallucinate or invent facts not in graph?)
3. Assign a **score between 0 and 5**, where:
    - 5: Perfect answer, matches expected and fully answers the question.
    - 4: Very good answer, with minor improvements needed.
    - 3: Correct answer, but lacks some details or clarity.
    - 2: Partially correct, but significant details are missing or there are some errors.
    - 1: Mostly incorrect, with major errors or missing key points.
    - 0: Wrong or completely irrelevant answer.
</workflow_output>

<output_format>
Respond **only** in the following JSON format:
{{
  "score": <number between 0 and 5>
}}

Please just output the json without anything else.
</output_format>

Now evaluate:
Question:
{question}

Expected Answer:
{expected_answer}

Workflow Output:
{workflow_output}

Evaluate this answer now.
"""

# TODO：这里不够充分，需要增加更多的上下文，比如：有哪些action可以调用；做的修改细粒度为增加，减少，修改；加上思考轨迹
summary_prompt_template= """
You are a **Workflow Analyst and Optimizer Agent**.

Your tasks are:
1. Summarize the current workflow test results.
2. Extract insights or patterns that could guide future improvements.
3. Propose the **next step of improvement**, which must be **one of the two types**:
   - **Topology Optimization**:
     • Add, modify, or reorganize nodes in the workflow graph.
     • Add a new prompt to support a new node if needed (prompt content can be simple).
   - **Prompt Optimization**:
     • Refine or rewrite an existing prompt to improve LLM response quality.
     • Do not change the graph structure; only improve the content of one prompt.

**Input:**
- Modification: {modification}
- Test Results: {results}
- Avg Score: {avg_score}

**Output Format:**

Summary:
- Key patterns and trends
- Common failure or success points

Next Improvement Proposal:
- Description: What and why?
- Expected Impact: What will this improve?
- Risk: Any potential downside?
"""

get_actions_prompt_template = """
### Instructions
You are an expert in the design and optimization of Multi - Agent system (MAS). You are proficient in designing and optimizing MAS frameworks, especially MAS systems based on YAML configuration files. The core of our MAS system consists of three parts: Actions, Operators, and Experts. The specific definitions are as follows:
- **Actions**: Pre - defined and unmodifiable available resources in the system, representing the actions that an Operator can take, such as browsing web pages and querying graph databases. They are components of Operators and bind the behaviors of Operators.
- **Operators**: Basic execution units that encapsulate jobs, tools, actions, and context information into executable `Task` objects. They are composed of three parts: `instruction` (describing the role, task objective, precautions, and output style), `output_schema` (defining the format and structure of the output content), and `actions` (a list of callable Actions).
- **Experts**: Professional executors in the agent system, responsible for handling specific - domain tasks. They complete tasks by orchestrating and executing `Operators`, organizing multiple `Operators` into a directed acyclic graph (DAG) to clarify the execution order and dependency relationships. They consist of two major parts: `profile` (including name, description, actor_name, thinker_name) and `workflow` (specifying the task execution process, which is a sequence of Operators).

Tasks are distributed by the system leader to each expert, and experts collaborate to complete them. When a task is input into the system, the system leader first decomposes the task and distributes it to each Expert, and then the Experts execute the task specifically. During the execution process of an Expert, Operators are certain steps in the execution. Your main task is to propose optimization actions for Operators and Experts based on the existing configuration and task description of the MAS system to enhance the system's ability to complete tasks. Optimization actions include the optimization type (add or modify), the optimization target (Operators or Experts), the reason for optimization (reason), and the optimization suggestion (suggestion). Finally, output a list of optimization actions.

### Context
{context}

### Requirements
1. Only analyze and optimize Operators and Experts. Actions do not need to be optimized.
2. Single responsibility: The functions of an Operator should be atomic, with each Operator only responsible for a single specific function.
3. Each output should contain no more than 4 optimization actions, determined by the current system.
4. Optimizations should be based on the context information and centered around the task.

### Workflow
1. Obtain the **task description** from the **context**. Analyze the capabilities required to complete the task through "core objective decomposition → sub - task splitting → derivation of tools/actions required for sub - tasks" to get a structured list of capabilities.
2. Based on the list of capabilities, analyze the existing Experts and Operators in the context to determine if there are any missing or insufficient capabilities.
3. Based on the analysis results, decide whether to add Operators and Experts:
    - Adding an Operator: Clearly define the core responsibilities and key functional steps. Select Actions covering each step from the context to ensure that the `actions` list has no redundancy or omissions.
    - Adding an Expert: Analyze the responsibilities and functions. Combine the existing and newly added Operators to determine the Operator composition and topology of the Expert.
4. Similarly, based on the results of step 2, decide whether to modify and optimize Operators and Experts from the following dimensions:
    - Operator: Check if the `instruction` covers the sub - task objective, if the `output_schema` matches the output format, and if the `actions` support the function execution. Modify if they do not meet the requirements.
    - Expert: Check if the `desc` in the `profile` clearly defines the professional boundaries and if the DAG topology of the `workflow` conforms to the sub - task dependency relationships. Modify if they do not meet the requirements. Finally, check if the 'name' matches responsibilities and modify if necessary.
5. Organize the analysis results and output the final optimization actions.

### Output Format
Output the optimization actions taken in a JSON list.
```json
[
  {{
    "action_type": "<one of: add/modify >",
    "optimize_object": "<one of: operator/expert>",
    "reason": "<why this optimization is needed>",
  }}
]
```
"""

optimize_op_prompt_template = """
### Instructions
You are an expert in the design and optimization of Multi-Agent system (MAS). 
You specialize in designing and optimizing MAS frameworks based on YAML configuration files.
Our MAS systems are based on yaml configuration file and composed of three parts: Actions, Operators, and Experts.
Your task is to optimize the existing Operators (add or modify operators) based on the context information and around the tasks the system needs to complete, so as to enhance the system's ability to accomplish tasks.

### Optimization Suggestions
Here are some possible optimization suggestions generated by other LLMs, which can be used as a reference but do not need to be fully followed.
{optimize_actions}

### Context
{context}

### Requirements
1. Single responsibility: The functions of an Operator should be atomic. Each operator should only be responsible for a single specific function. Pay special attention to this when adding operators.
2. Optimizations must be based on the context information and centered around the tasks the system needs to complete.

### Operator Example
```yaml
- &algorithms_execute_operator
instruction: |
  You are a professional graph algorithm execution expert. Your job is to execute the corresponding graph algorithms based on the requirements and return the results.
  Note, you cannot ask the user for more information.

  Based on the validated algorithm and parameters, complete the algorithm execution task as required:

  1. Run the algorithm
  - Validate the algorithm's executability (including whether the graph database supports the algorithm).
  - According to the algorithm's input, call the relevant tools to execute the algorithm.
output_schema: |
  **Algorithm Called**: The algorithm(s) and parameters used (if multiple algorithms were used)
  **Status**: Execution status of the algorithm
  **Algorithm Result**: The result of the algorithm execution. If failed, return the reason for failure
  ... (Free format)
actions:
  - *content_understanding_action_3
  - *algorithms_intention_identification_action
  - *algorithms_execution_action
```
```
This is an example of writing a graph algorithm operator. The `instruction` part describes the role, responsibilities, etc. of the operator; the `output_schema` defines the output format, including three parts: `Algorithm Called`, `Status`, and `Algorithm Result`, corresponding to the called algorithm, the execution status of the algorithm, and the result of the algorithm execution respectively; the `Action` binds the actions that the operator can perform, including `content_understanding_action_3`, `algorithms_intention_identification_action`, and `algorithms_execution_action`, which are used for text understanding, algorithm intention identification, and algorithm execution respectively.

### Operator Writing Guide
The functions of an Operator should be split as much as possible. Each Operator should have a single responsibility, and its capabilities should be atomized to decouple the system capabilities.

**Definition**
An Operator is defined using `&operator_name`, creating a YAML anchor, such as `&algorithms_execute_operator`.
Key points:
1. Do not omit the `&` to create the anchor.
2. The operator name should correspond to its responsibilities and accurately describe the main responsibilities, avoiding vague and generalized definitions.

**instruction**
The `Instruction` should clearly describe the role, responsibilities, core functions, core principles, and workflow of the Operator.
1. The content should only focus on the core functions of the Operator, and irrelevant functions should not be mentioned.
2. Avoid using vague words such as "maybe" and "approximately", and use clear expressions.
3. Include 3 - 5 core working principles, focusing on "how to do it correctly and how to avoid mistakes". Each principle should correspond to the pain points of the core functions of the Operator and include specific operation guidelines.
4. Clearly define the standard workflow for completing the task, including step dependencies, operations at each step, possible actions to be performed, step results, and failure handling.

**output_schema**
Define the expected output format with the following syntax:
**field1**: Description of field1
**field2**: Description of field2

Principles:
1. Do not omit key information and do not output redundant information.
2. Be able to identify whether the operator has executed successfully. If it fails, return the reason for failure.
3. Explain the detailed steps of the operator's task execution. For example, when querying a web page, the query parameters should be known.
4. Determine whether overall statistical information is needed.

**actions**
Syntax:
`actions` is a YAML list that references the pre - defined actions in the system, indicating the actions that the current operator can take when performing tasks. The format is as follows:
actions:
  - *action1
  - *action2
where `*` is the anchor reference in YAML, and `action1` is the name of the corresponding action.

Principles:
1. Completeness: Ensure completeness when writing actions, which should cover all the capabilities required for the operator to complete the task.
2. Minimality: On the premise of covering the operator's capabilities, use as few actions as possible.
3. Authenticity: All actions can only reference the actions that appear in the `actions` part of the **context**, and no fabricated actions are allowed.
4. Independence: Actions should be independent of each other, and their functions should not overlap.

### Workflow
1. Obtain the **task description** from the **context**. Analyze the capabilities required to complete the task through "core objective decomposition → sub - task splitting → derivation of tools/actions required for sub - tasks" to get a structured list of capabilities.
2. Based on the list of capabilities, analyze the existing Operators in the context to determine if there are any missing or insufficient capabilities.
3. Refer to the **optimization suggestions**, evaluate their rationality, and modify and supplement them if they are unreasonable or insufficient to get the final list of optimization actions to be executed.
4. Refer to the **Operator writing guide** and the list of optimization actions to perform specific optimizations. You can optimize the operators beyond the guide based on your own understanding and thinking.
5. Organize the optimization results and output the final optimization actions.

### Output Format
Output the optimization results taken in JSON .
```json
{{
  "modifications": <A JSON list indicating what optimizations have been made, with each item being a string>,
  "new_configs": {{
      "operators": "operators:<A string begin with 'operators:' including the complete YAML configuration content of the operator part (including the original operators)>"
  }}
}}
```
"""

optimize_expert_prompt_template  = """
### Instructions
You are an expert in the design and optimization of Multi - Agent system (MAS). You specialize in designing and optimizing MAS frameworks based on YAML configuration files. Our MAS system is configured using YAML configuration files and mainly consists of three parts: actions, operators, and experts.
Your task is to optimize the existing Experts (add or modify experts) based on the context information and around the tasks the system needs to complete, so as to enhance the system's ability to accomplish tasks.

### Optimization Suggestions
Here are some possible optimization suggestions generated by other LLMs, which can be used as a reference but do not need to be fully followed.
{optimize_actions}

### Context
{context}

### Requirements
1. Single responsibility: The functions of an expert should be atomic. Each expert should only be responsible for a single specific function. Pay special attention to this when adding experts.
2. Optimizations must be based on the context information and centered around the tasks the system needs to complete.

### Expert Example
```yaml
experts:
  - profile:
      name: "Browser Use Expert"
      desc: |
        An autonomous and efficient web intelligence expert focused on deep research and information synthesis. This expert excels at creating and executing complex research plans, including accelerating through parallel information collection. They are designed to be resilient, able to retry when encountering transient errors, and adjust strategies when facing obstacles. Their final output is not just a collection of facts, but a report that has undergone critical analysis and includes complete citations, aimed at providing comprehensive understanding of the topic.
    reasoner:
      actor_name: "Browser Use Expert"
      thinker_name: "Browser Use Expert"
    workflow:
      - [*web_research_operator]
```
```
This is an example of writing a browser expert, which mainly consists of three parts: profile, reasoner, and workflow.
The profile is the "identity manual" of an Expert, which needs to clearly define its domain positioning, core capabilities, and output goals to avoid overlapping responsibilities with other Experts. The "name" represents the name of the expert; the "desc" describes the expert's role positioning, core capabilities, execution characteristics, and output standards from a **third - person** perspective; the "reasoner" part indicates the name of the reasoning engine behind it, and the name can simply be the same as that of the expert; the "workflow" represents the orchestration of operators, organizing multiple `Operators` into a directed acyclic graph (DAG) to clarify the execution order and dependency relationships, which is a standard process for executing tasks.

### Expert Writing Guide
There are multiple Experts in the entire MAS system, and they collaborate to complete tasks. An Expert is the specific executor of a task. When a task is input into the system, it will be completed through the collaboration of multiple experts. Therefore, the functions of Experts should be split as much as possible, and each Expert should focus on completing a specific - domain task. However, there is no need to atomically split the capabilities of an expert. An expert may have multiple capabilities and call multiple operators at the same time. The key is that it focuses on completing one thing.

**Definition**
An Expert is defined through three parts: profile, reasoner, and workflow.

**profile**
The "name" is the name of the expert, which should accurately describe its responsibilities and role.
The "desc" needs to clearly describe the expert's role, responsibilities, core functions, and final output results. The "desc" should be written from a **third - person perspective**, with the focus being to make others understand the expert's role positioning, responsibilities, and functions.

**reasoner**
The "reasoner" includes two fields: "actor_name" and "thinker_name", which can simply be the same as the expert's name.

**workflow**
The "workflow" defines the orchestration of operators, organizing multiple operators into a directed acyclic graph (DAG) to clarify the execution order and dependency relationships, which is a standard process for executing tasks.
Syntax:
The "workflow" is a YAML array, and each item in the array is a one - dimensional array that defines a dependency relationship. For example, `[*op1, *op2]` indicates the execution order of `op1 -> op2`. Operators are referenced in the form of `*op_name`, and the `*` cannot be omitted. The following is an example:
workflow:
  - [*op1, *op2, *op4, *op5, ...]
  - [*op1, *op3]
Here, `*` is the anchor reference in YAML, and `op1` and `op2` are the names of the corresponding operators.
This "workflow" defines two dependency relationships: `op1 -> op2 -> op4 -> op5` and `op1 -> op3`.
These two dependency relationships together form a DAG, which means that `op1` is executed first. After `op1` is completed, `op2` and `op3` can be executed in parallel. After `op2` is executed, `op4` and `op5` can be executed, and so on.

Principles:
The "workflow" is the core of an expert, representing a standard process when it executes tasks.
1. Completeness: Ensure completeness when writing the "workflow", and the involved operators should cover the capabilities required for the expert to complete the task.
2. Dependency: Correctly identify the dependency relationships between tasks, such as "data acquisition → data cleaning".
3. Authenticity: All operators can only reference the operators that appear in the "operators" part of the **context**, and no fabricated operators are allowed.
4. Parallelism: If tasks are independent of each other and have no dependency relationships, parallelize them as much as possible to improve the task execution speed.

### Workflow
1. Obtain the **task description** from the **context**. Analyze the capabilities required to complete the task through "core objective decomposition → sub - task splitting → decomposition of capabilities required for sub - tasks" to get a structured list of capabilities.
2. Based on the list of capabilities, analyze the existing Experts in the context to determine if there are any missing or insufficient capabilities.
3. Refer to the **optimization suggestions**, evaluate their rationality, and modify and supplement them if they are unreasonable or insufficient to get the final list of optimizations to be executed.
4. Refer to the **Expert writing guide** and the list of optimizations. You can optimize the experts beyond the guide based on your own understanding and thinking, and perform specific optimizations.
5. Output the optimization results.

### Output Format
Output in JSON format. When outputting the content of experts, note that the three parts of profile, reasoner, and workflow are at the same level.
```json
{{
  "modifications": <A JSON list indicating what optimizations have been made, with each item being a string>,
  "new_configs": {{
      "experts": <A string begin with `experts:`, including the complete YAML configuration content of the expert part (including the original experts)>
  }}
}}
```
"""

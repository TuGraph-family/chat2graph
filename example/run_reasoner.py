import asyncio
import os

from app.agent.reasoner.dual_model import DualModelReasoner


async def main():
    """Main function."""
    graph_modeling_task = """
===
Task: 从原始文本中识别和提取关键实体类型，为后续的图数据库模型构建奠定基础。(用中文回答)
Context:
输入的数据是三国演义全文，需要从中识别出关键实体类型。这些文本包含了丰富的历史信息，涵盖了人物对话、事件描述、地理位置、时间节点等多个维度的内容。文本中的实体之间存在复杂的关联关系，需要系统性地进行识别和分类。
Knowledge:
在文学文本的实体识别过程中，需要注意以下几点：
1. 命名实体识别规则
  ○ 人名通常伴随着称号、职位或动作描述
  ○ 地名常与方位词、行政区划词相连
  ○ 时间词通常包含具体的年号、季节或时辰
  ○ 事件名往往与特定的动词或结果描述相关联
2. 文本特征
  ○ 同一实体可能有不同的指代方式（别名、尊称等）
  ○ 实体提及可能是显式或隐式的
  ○ 上下文对实体类型判断至关重要
Actions:
读取文本内容 -next-> 识别关键实体类型
Tools:
1. text_content_loader
描述: 加载并解析源文本内容
输入: file_path, encoding_type
输出: text_content(string)
2. entity_type_extractor
描述: 从文本中识别和提取关键实体类型
输入: text_content(string), extraction_rules(dict)
输出: entity_types(list)
Scratchpad:
输入文本示例：
建安七年春，曹操率军南下。时刘备驻守新野，闻曹操将至，召诸葛亮商议军情。亮曰：“曹操兵强粮足，不可与战，宜退保川口，观机而动。”备从之，遂退守川口。
次日，曹操兵至，见新野空虚，乃进兵攻川口。备使关公出战，不敌，退入川口。操兵久不动，备乃引兵出，与操军交战，大败而走。操兵追至川口，备急闭门守之，城中人马皆惊恐。
城中人马皆惊恐，备曰：“吾有诈，可破之。”遂开门，大呼而出，操兵大败。备乘胜追击，操军大溃，曹操自走脱。备收其军器，仓库，军民无不欢喜。
===
"""

    travel_planning_task = """
Task: 利用给定的信息，请为主人制定一份合理的一日游计划。
Context:
限制条件：
1. 总预算：一定不超过500元/人，越接近 500元/人 主人越满意（包含交通、门票、餐饮）
2. 体力限制：总步行距离不宜超过15公里
3. 需要安排午餐和晚餐
4. 须考虑景点间交通时间
5. 旺季需预约的景点须提前规划

要求：
1. 制定具体的行程时间表
2. 计算总预算
3. 说明交通方案
4. 解释行程安排的合理性


Knowledge:
- 主人的偏好是在周末时光里享受美食，喜欢尝试新鲜的食物，但不喜欢排队等候。
- 主人的预算是每顿餐饮在100-200元之间。
- 主人开车或者地铁都可以，但不喜欢步行。

Actions:
Do what you want -next-> Do what you want

Tools:
- None

Scratchpad:
时间信息：
- 日期：2024年4月15日（周一）
- 天气：晴朗，气温15-25℃
- 规划时段：早8:00至晚20:00

可选景点信息：
1. 故宫博物院
   - 开放时间：8:30-17:00（最后入场16:10）
   - 门票：60元/人
   - 建议游览时间：3-4小时
   - 地铁：天安门东站（1号线）

2. 天坛公园
   - 开放时间：6:00-22:00
   - 门票：15元/人（普通联票35元/人）
   - 建议游览时间：2-3小时
   - 地铁：天坛东门站（5号线）

3. 南锣鼓巷
   - 开放时间：全天
   - 门票：免费
   - 建议游览时间：2-3小时
   - 地铁：南锣鼓巷站（6、8号线）

4. 颐和园
   - 开放时间：6:30-18:00
   - 门票：30元/人（联票60元/人）
   - 建议游览时间：3-4小时
   - 地铁：北宫门站（4号线）

交通信息：
- 北京地铁：3-10元/程（普通卡）
- 出租车：起步价13元/3公里，超出部分2.3元/公里

用餐推荐：
1. 全聚德（前门店）：烤鸭套餐 298元/套
2. 护国寺小吃：炸酱面 15元/碗
3. 南锣鼓巷小吃：人均50-100元
4. 四季民福烤鸭：烤鸭套餐 238元/套

"""

    model_config = {
        "model_alias": "qwen-max",
        "api_base": os.getenv("QWEN_API_BASE"),
        "api_key": os.getenv("QWEN_API_KEY"),
    }
    reasoner = DualModelReasoner(model_config=model_config)

    await reasoner.infer(op_id="op1", task=travel_planning_task, print_messages=True)


if __name__ == "__main__":
    asyncio.run(main())
